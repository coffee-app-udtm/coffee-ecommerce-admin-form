<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        f//wAD//4AA//+AAH//gAD//8AA///gB//8=
</value>
  </data>
</root>